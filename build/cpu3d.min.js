class CPU3D{#width;#height;#render;#callback;#threads;#threadCount;#threadResponseCount;#vertexBank;#textureBank;#shaderBank;#pixelBuffer_Uint8;#messageQueue;#initialised;#canvas;#canvasContext;#imageData;#filepath;#CONT_USING_UINT8CLAMPED;#CONT_USING_ARRAY_SET;#CONT_USING_CALLBACK;#CONT_USING_CANVAS;#CONT_USING_THREADS;constructor(canvas,callback,threadCount,filepath){this.CONT_USING_UINT8CLAMPED=false;this.CONT_USING_ARRAY_SET=false;this.CONT_USING_CALLBACK=false;this.CONT_USING_CANVAS=false;this.CONT_USING_THREADS=false;if(filepath!=undefined&&filepath!=""){this.filepath=filepath;}else{this.filepath="./CPU3D.js";}
this.pixelBuffer_Uint8=new Uint8Array(0);this.initialised=false;this.width=0;this.height=0;if(typeof callback=="function"){this.callback=callback;this.CONT_USING_CALLBACK=true;}
if(typeof canvas=="object"){this.canvas=canvas;this.canvasContext=this.canvas.getContext("2d");this.imageData=this.canvasContext.createImageData(this.canvas.width,this.canvas.height);this.CONT_USING_CANVAS=true;}
if(!this.CONT_USING_CALLBACK&&!this.CONT_USING_CANVAS){console.log("CPU3D Error: CPU3DCore requires either a callback function or canvas element to work.");return;}
var testArray;if(this.CONT_USING_CANVAS){testArray=this.canvasContext.getImageData(0,0,1,1);testArray=testArray.data;}else{testArray=new Uint8Array(1);}
if(testArray.set!=undefined){this.CONT_USING_ARRAY_SET=true;}
if(threadCount>0){this.CONT_USING_THREADS=true;this.messageQueue=new Array();this.createThreads(threadCount);}else{this.CONT_USING_THREADS=false;this.render=new CPU3D_Core();}
return;}
createThreads=function(count){this.threadCount=count;this.threads=new Array();for(var i=0;i<this.threadCount;i++){var thread=new Worker(this.filepath);thread.addEventListener('message',this.threadResponse,false);thread.postMessage([{id:1,index:i,threadCount:this.threadCount}]);this.threads.push(thread);}
return;}
destroyThreads=function(count){if(this.CONT_USING_THREADS){for(var i=0;i<this.threadCount;i++){this.threads[i].terminate();}
this.CONT_USING_THREADS=false;this.initialised=false;this.render=new CPU3D_Core();}
return true;}
sendMessage=function(messageData){for(var i=0;i<this.threadCount;i++){var thread=this.threads[i];thread.postMessage(messageData);}
return;}
sendMessages=function(){if(this.CONT_USING_THREADS){for(var i=0;i<this.threadCount;i++){var thread=this.threads[i];thread.postMessage(this.messageQueue);}
this.messageQueue=new Array();}
return;}
addMessageToQueue=function(messageData){this.messageQueue.push(messageData);return;}
interpretMessage=function(event){var offset=(event.data.offset*this.width)*4;this.getBufferProcessing(event.data.data,offset);return;}
getBufferProcessing=function(pixels,offset){if(this.CONT_USING_CANVAS&&!this.CONT_USING_CALLBACK&&!this.CONT_USING_THREADS){this.getBufferCanvas(pixels);}else if(this.CONT_USING_CANVAS&&!this.CONT_USING_CALLBACK&&this.CONT_USING_THREADS){this.getBufferCanvasThreaded(pixels,offset);}else if(!this.CONT_USING_CANVAS&&this.CONT_USING_CALLBACK&&!this.CONT_USING_THREADS){this.getBufferCallback(pixels);}else if(!this.CONT_USING_CANVAS&&this.CONT_USING_CALLBACK&&this.CONT_USING_THREADS){this.getBufferCallbackThreaded(pixels,offset);}else if(this.CONT_USING_CANVAS&&this.CONT_USING_CALLBACK&&!this.CONT_USING_THREADS){this.getBufferCanvasCallback(pixels);}else if(this.CONT_USING_CANVAS&&this.CONT_USING_CALLBACK&&this.CONT_USING_THREADS){this.getBufferCanvasCallbackThreaded(pixels,offset);}}
getBufferCanvas=function(pixels){if(this.CONT_USING_ARRAY_SET){this.imageData.data.set(pixels);}else{var data=this.imageData.data;var length=data.length;for(var i=0;i<length;i++){data[i]=pixels[i];}}
this.canvasContext.putImageData(this.imageData,0,0);return;}
getBufferCanvasThreaded=function(pixels,offset){if(this.CONT_USING_ARRAY_SET){this.imageData.data.set(pixels,offset);}else{var data=this.imageData.data;var length=pixels.length;var i=offset;var j=0;while(j<length){data[i]=pixels[j];i++;j++;}}
this.threadResponseCount++;if(this.threadResponseCount==this.threadCount){this.canvasContext.putImageData(this.imageData,0,0);}
return;}
getBufferCallback=function(pixels){this.callback(pixels);return;}
getBufferCallbackThreaded=function(pixels,offset){if(this.CONT_USING_ARRAY_SET){this.pixelBuffer_Uint8.set(pixels,offset);}else{var buffer=this.pixelBuffer_Uint8;var length=pixels.length;var i=offset;var j=0;while(j<length){buffer[i]=pixels[j];i++;j++;}}
this.threadResponseCount++;if(this.threadResponseCount==this.threadCount){this.callback(this.pixelBuffer_Uint8);}
return;}
getBufferCanvasCallback=function(pixels){if(this.CONT_USING_ARRAY_SET){this.imageData.data.set(pixels);}else{var data=this.imageData.data;var length=data.length;for(var i=0;i<length;i++){data[i]=pixels[i];}}
this.canvasContext.putImageData(this.imageData,0,0);this.callback(this.imageData.data);return;}
getBufferCanvasCallbackThreaded=function(pixels,offset){if(this.CONT_USING_ARRAY_SET){this.imageData.data.set(pixels,offset);}else{var data=this.imageData.data;var length=pixels.length;var i=offset;var j=0;while(j<length){data[i]=pixels[j];i++;j++;}}
this.threadResponseCount++;if(this.threadResponseCount==this.threadCount){this.canvasContext.putImageData(this.imageData,0,0);this.callback(this.imageData.data);}
return;}
setCanvas=function(canvas){if(typeof canvas=="object"){this.canvas=canvas;this.canvasContext=this.canvas.getContext("2d");this.imageData=this.canvasContext.createImageData(this.canvas.width,this.canvas.height);this.CONT_USING_CANVAS=true;}else{this.CONT_USING_CANVAS=false;}
return;}
initialise=function(width,height){width=width<<0;height=height<<0;if(width<1){width=1;console.log("CPU3D Error: initialise requires a width more then 0.");return 0;}
if(height<1){height=1;console.log("CPU3D Error: initialise requires a height more then 0.");return 0;}
this.CONT_USING_UINT8CLAMPED=true;try{if(Uint8ClampedArray=="undefined"){}}catch(err){this.CONT_USING_UINT8CLAMPED=false;}
this.width=width;this.height=height;this.arrayLength=this.width*this.height*4;this.vertexBank=new Array();this.vertexBank.push(true);this.textureBank=new Array();this.textureBank.push(true);this.shaderBank=new Array();this.shaderBank.push(true);if(this.CONT_USING_THREADS){if(this.CONT_USING_UINT8CLAMPED){this.pixelBuffer_Uint8=new Uint8ClampedArray(this.arrayLength);}else{this.pixelBuffer_Uint8=new Uint8Array(this.arrayLength);}
this.addMessageToQueue({id:2,width:width,height:height,uint8Clamped:this.CONT_USING_UINT8CLAMPED});}else{this.render.initialise(width,height,0,height,this.CONT_USING_UINT8CLAMPED);}
this.initialised=true;return true;}
resetScreen=function(width,height){width=width<<0;height=height<<0;if(width<1){width=1;console.log("CPU3D Error: initialise requires a width more then 0.");return 0;}
if(height<1){height=1;console.log("CPU3D Error: initialise requires a height more then 0.");return 0;}
this.width=width;this.height=width;this.arrayLength=this.width*this.height*4;if(this.CONT_USING_THREADS){this.pixelBuffer_Uint8=new Uint8ClampedArray(width*height*4);this.addMessageToQueue({id:3,width:width,height:height});}else{this.render.resetScreen(width,height,1);}
return true;}
draw=function(vboID,start,length){if(this.CONT_USING_THREADS){this.addMessageToQueue({id:4,vbo:vboID,start:start,length:length});}else{this.render.draw(vboID,start,length);}
return true;}
getBuffer=function(){var buffer=1;if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.threadResponseCount=0;this.addMessageToQueue({id:5,buffer:buffer});this.sendMessages();}else{this.getBufferProcessing(this.render.getBuffer(buffer),0);}
return;}
clearBuffer=function(buffer){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:6,buffer:buffer});}else{this.render.clearBuffer(buffer);}
return;}
clearColor=function(red,green,blue,alpha){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:19,red:red,green:green,blue:blue,alpha:alpha});}else{this.render.clearColor(red,green,blue,alpha);}
return;}
getVBOId=function(){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){var found=false;var i=0;for(i;i<this.vertexBank.length;i++){if(this.vertexBank[i]==false){this.vertexBank[i]=true;found=true;}}
if(!found){this.vertexBank.push(true);}
this.addMessageToQueue({id:7});return this.vertexBank.length-1;}else{return this.render.getVBOId();}
return 0;}
loadVBO=function(vbo,data){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:8,vboID:vbo,vertexData:data});}else{this.render.loadVBO(vbo,data);}
return;}
clearVBO=function(vbo){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.vertexBank[vbo]=false;this.addMessageToQueue({id:9,vboID:vbo});}else{this.render.clearVBO(vbo);}
return;}
getTBOId=function(){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){var found=false;var i=0;for(i;i<this.textureBank.length;i++){if(this.textureBank[i]==false){this.textureBank[i]=true;found=true;}}
if(!found){this.textureBank.push(true);}
this.addMessageToQueue({id:10});return this.textureBank.length-1;}else{return this.render.getTBOId();}}
loadTBO=function(tbo,data,width,height){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:11,tboID:tbo,data:data,width:width,height:height});}else{this.render.loadTBO(tbo,data,width,height);}
return;}
bindTBO=function(tbo,textureSlot){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:12,tboID:tbo,textureSlot:textureSlot});}else{this.render.bindTBO(textureSlot,tbo);}
return;}
clearTBO=function(tbo){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.textureBank[tbo]=false;this.addMessageToQueue({id:13,tboID:tbo});}else{this.render.clearTBO(tbo);}
return;}
getSBOId=function(){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){var found=false;var i=0;for(i;i<this.shaderBank.length;i++){if(this.shaderBank[i]==false){this.shaderBank[i]=true;found=true;}}
if(!found){this.shaderBank.push(true);}
this.addMessageToQueue({id:14});return this.shaderBank.length-1;}else{return this.render.getSBOId();}
return id;}
loadSBO=function(sbo){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:15,shaderID:sbo});}else{this.render.loadSBO(sbo);}
return;}
bindSBO=function(sbo){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:16,shaderID:sbo});}else{this.render.bindSBO(sbo);}
return;}
clearSBO=function(sbo){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.shaderBank[sbo]=false;this.addMessageToQueue({id:17,sboID:sbo});}else{this.render.clearSBO(sbo);}
return;}
assignSBOVertexShader=function(sbo,filepath,functionName){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:18,shaderID:sbo,filepath:filepath,functionName:functionName});}else{this.render.assignSBOVertexFunction(sbo,window[""+functionName]);}
return;}
assignSBOPixelShader=function(sbo,filepath,functionName){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:19,shaderID:sbo,filepath:filepath,functionName:functionName});}else{this.render.assignSBOPixelFunction(sbo,window[""+functionName]);}
return;}
addSBOVertexAttribute=function(sbo,shader,type,length){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:20,shaderID:sbo,shader:shader,type:type,length:length});}else{this.render.addSBOVertexAttribute(sbo,shader,type,length);}
return;}
setShaderVariable=function(name,value){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:21,name:name,value:value});}else{window[""+name]=value;}
return;}
clearColor=function(red,green,blue,alpha){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:22,red:red,green:green,blue:blue,alpha:alpha});}else{this.render.clearColor(red,green,blue,alpha);}
return true;}
setProperty=function(name,value){if(this.initialised==false){console.log("CPU3D Error: CPU3DCore has not been initialised yet. Use setTimeout or setInterval to delay draw commands after initialing.");return false;}
if(name[0]!='P'||name[1]!='R'||name[2]!='O'||name[3]!='P'){console.log("CPU3D Error: "+name+" is not a property.");return false;}
if(this.CONT_USING_THREADS){this.addMessageToQueue({id:23,name:name,value:value});}else{this.render[""+name]=value;}
return true;}}
try{Window.document;}catch(err){var index;var startY;var endY;var totalY;var threadCount;var render=new CPU3D_Core();function recieveMessage(event){var messages=event.data;for(var i=0;i<messages.length;i++){interpretMessage(messages[i]);}}
addEventListener('message',recieveMessage,false);var l;var w;var h;function interpretMessage(messageData){var data=messageData;var id=data.id;if(id==undefined||id==0){}else if(id==1){index=data.index;threadCount=data.threadCount;}else if(id==2){totalY=data.height;var segmentSize=(totalY/threadCount)<<0;startY=segmentSize*index;endY=index==threadCount-1?totalY:segmentSize*(index+1);render.initialise(data.width,data.height,startY,endY,data.uint8Clamped);}else if(id==3){render.resetScreen(data.width,data.height,threadCount);}else if(id==4){render.draw(data.vbo,data.start,data.length);}else if(id==5){var pixels=render.getBuffer();postMessage({index:index,offset:render.startY,data:pixels});}else if(id==6){render.clearBuffer(data.buffer);}else if(id==7){render.getVBOId();}else if(id==8){render.loadVBO(data.vboID,data.vertexData);}else if(id==9){render.clearVBO();}else if(id==10){render.getTBOId();}else if(id==11){render.loadTBO(data.tboID,data.data,data.width,data.height);}else if(id==12){render.bindTBO(data.textureSlot,data.tboID);}else if(id==13){render.clearTBO();}else if(id==14){render.getSBOId();}else if(id==15){render.loadSBO(data.shaderID);}else if(id==16){render.bindSBO(data.shaderID);}else if(id==17){render.clearSBO();}else if(id==18){importScripts(data.filepath);this.render.assignSBOVertexFunction(data.shaderID,self[""+data.functionName]);}else if(id==19){importScripts(data.filepath);this.render.assignSBOPixelFunction(data.shaderID,self[""+data.functionName]);}else if(id==20){this.render.addSBOVertexAttribute(data.shaderID,data.shader,data.type,data.length);}else if(id==21){self[""+data.name]=data.value;}else if(id==22){this.render.clearColor(data.red,data.green,data.blue,data.alpha);}else if(id==23){render[""+data.name]=data.value;}
return;}}
class CPU3D_Core{#pixelBuffer;#pixelBuffer_Uint8;#pixelBuffer_Uint32;#pixelBufferIntial_Uint32;#depthBuffer_Float32;#depthBufferIntial_Float32;#vertexBank;#textureBank;#defaultTexture;#shaderBank;#width;#height;#viewportMatrix;#polygon;#TEXTURE_0;#TEXTURE_1;#TEXTURE_3;#TEXTURE_4;#TEXTURE_5;#TEXTURE_6;#TEXTURE_7;#CONT_TEXTURE_COUNT=8;#SHADER_shader0;#PROP_ENABLE_TRIANGLE_OVERSCAN=false;#PROP_ENABLE_BACKFACECULL=true;#PROP_ENABLE_TRIANGLE_OUTLINE=false;#PROP_ENABLE_Z_BUFFER=true;#PROP_CLEAR_COLOUR=(0<<24)|(0<<16)|(0<<8)|0;#CONT_USING_UINT8CLAMPED;constructor(){return;}
initialise=function(width,height,startY,endY,uintClamped){this.CONT_USING_UINT8CLAMPED=uintClamped;this.startY=startY;this.endY=endY;this.resetScreen(width,height,startY,endY);this.vertexBank=new Array();this.vertexBank.push(true);this.textureBank=new Array();this.textureBank.push(true);this.shaderBank=new Array();this.shaderBank.push(true);this.defaultTexture={data:new Uint32Array(1),width:1,height:1};this.defaultTexture.data[0]=(255<<24)|(0<<16)|(0<<8)|0;return;}
resetScreen=function(width,height,startY,endY){this.width=width;this.height=this.endY-this.startY;this.viewportMatrix=this.createViewportMatrix(0,0,width,height);this.pixelBuffer=new ArrayBuffer(this.width*this.height*4);if(this.CONT_USING_UINT8CLAMPED){this.pixelBuffer_Uint8=new Uint8ClampedArray(this.pixelBuffer);}else{this.pixelBuffer_Uint8=new Uint8Array(this.pixelBuffer);}
this.pixelBuffer_Uint32=new Uint32Array(this.pixelBuffer);this.generateIntialPixelBuffer();this.depthBuffer_Float32=new Float32Array(this.width*this.height);this.depthBufferIntial_Float32=new Float32Array(this.width*this.height);for(var i=0;i<this.width*this.height;i++){this.depthBufferIntial_Float32[i]=-1;}
this.clearBuffer(0);return;}
generateIntialPixelBuffer=function(){this.pixelBufferIntial_Uint32=new Uint32Array(this.width*this.height);for(var i=0;i<this.height;i++){for(var j=0;j<this.width;j++){this.pixelBufferIntial_Uint32[i*this.width+j]=this.PROP_CLEAR_COLOUR;}}}
updateUint8Clamped=function(Uint8Clamped){this.CONT_USING_UINT8CLAMPED=Uint8Clamped;if(this.CONT_USING_UINT8CLAMPED){this.pixelBuffer_Uint8=new Uint8ClampedArray(this.pixelBuffer);}else{this.pixelBuffer_Uint8=new Uint8Array(this.pixelBuffer);}}
getBuffer=function(){return this.pixelBuffer_Uint8;}
clearBuffer=function(buffer){if(buffer==undefined||buffer==0){this.pixelBuffer_Uint32.set(this.pixelBufferIntial_Uint32);this.depthBuffer_Float32.set(this.depthBufferIntial_Float32);}else if(buffer==1){this.pixelBuffer_Uint32.set(this.pixelBufferIntial_Uint32);}else if(buffer==2){this.depthBuffer_Float32.set(this.depthBufferIntial_Float32);}
return true;}
clearColor=function(red,green,blue,alpha){this.PROP_CLEAR_COLOUR=(alpha<<24)|(blue<<16)|(green<<8)|red;this.generateIntialPixelBuffer();return;}
draw=function(vbo,start,length){if(this.SHADER_shader0==null){console.log("cpu3d Error: No shader is bound.");return;}
var vertexBuffer=this.vertexBank[vbo];var inputLength=this.SHADER_shader0.inputCount;this.VERTEX_LENGTH=this.SHADER_shader0.outputCount;var startIndex=(start*inputLength)<<0;var endIndex=((start+length)*inputLength)<<0;if(vbo>=this.vertexBank.length){return;}
var faceVertices=[new Float32Array(this.VERTEX_LENGTH),new Float32Array(this.VERTEX_LENGTH),new Float32Array(this.VERTEX_LENGTH)];var intputVertex=new Float32Array(inputLength);this.polygon=new CPU3D_Polygon();this.vertexLoop(vertexBuffer,startIndex,endIndex,faceVertices,intputVertex,inputLength);}
pipeline=function(faceVertices){var vertexOffset=this.SHADER_shader0.pixelVertexOffset;if(vertexOffset>0){var reorderArray=new Float32Array(vertexOffset);for(var i=0;i<3;i++){for(var j=0;j<vertexOffset;j++){reorderArray[j]=faceVertices[i][j];}
faceVertices[i][0]=faceVertices[i][vertexOffset];faceVertices[i][1]=faceVertices[i][vertexOffset+1];faceVertices[i][2]=faceVertices[i][vertexOffset+2];faceVertices[i][3]=faceVertices[i][vertexOffset+3];for(var j=4;j<vertexOffset+4;j++){faceVertices[i][j]=reorderArray[j-4];}}}
var clippingValue=this.insideFrustum(faceVertices);if(clippingValue>-1){if(this.SHADER_shader0.pixelTexCoordCount>0){this.UVMapAdjustment(faceVertices);}
if(clippingValue>0){this.clipNearPlane(faceVertices,clippingValue);}
this.perspectiveDivision(faceVertices);if(!this.PROP_ENABLE_BACKFACECULL||this.backfaceCull(faceVertices[0],faceVertices[1],faceVertices[2])){this.viewportTransform(faceVertices);this.roundScreenValues(faceVertices);if(this.PROP_ENABLE_TRIANGLE_OUTLINE){for(var i=0;i<faceVertices.length;i++){var v1=faceVertices[i];var v2=faceVertices[(i+1)%faceVertices.length];this.drawLine(v1[0],v2[0],v1[1],v2[1]);}}
this.polygon.createPoylgon(faceVertices,this.width,this.height);this.generateEdges(this.polygon.vertices);}}
while(faceVertices.length>3){faceVertices.pop();}}
generateEdges=function(vertices){for(var i=1;i<vertices.length;i++){var vCurrent=vertices[i];var vPrev=vertices[i-1];if((vPrev[0]==vCurrent[0])&&(vPrev[1]==vCurrent[1])){vertices.splice(i-1,1);}}
if(vertices.length<3){return;}
var a=vertices[0];var b=vertices[1];var c=vertices[2];var ax=a[0];var ay=a[1];var bx=b[0];var by=b[1];var cx=c[0];var cy=c[1];var area=(ax*(by-cy)+bx*(cy-ay)+cx*(ay-by));if(area==0){return;}
var direction=this.backfaceCull(vertices[0],vertices[1],vertices[2])?-1:1;var validTriangle=0;var topLMostIndex=0;var topRMostIndex=0;var topLMostX=vertices[topLMostIndex][0];var topRMostX=topLMostX;var topLMostY=vertices[topLMostIndex][1];var topRMostY=topLMostY;var yEnd=vertices[0][1];for(var i=1;i<vertices.length;i++){var vertex=vertices[i];var vertexX=vertex[0];var vertexY=vertex[1];if(vertexY<topLMostY){topLMostIndex=i;topRMostIndex=i;topLMostX=vertexX;topRMostX=vertexX;topLMostY=vertexY;topRMostY=vertexY;}else if(vertexY==topLMostY){if(vertexX<topLMostX){topLMostIndex=i;topLMostX=vertexX;}
if(vertexX>topRMostX){topRMostIndex=i;topRMostX=vertexX;}}
if(yEnd<vertexY){yEnd=vertexY;}}
this.createEdge(vertices,topLMostIndex,topRMostIndex,yEnd<<0,direction);return;}
createEdge;scanline;getTexturePixelColor=function(x,y,texture){var data=texture.data;var width=texture.width;var height=texture.height;var xB=((x*width)<<0)%width;var yB=((y*height)<<0)%height;var index=((yB*width)+xB);return data[index];}
setPixelIndex=function(array,i,red,green,blue,alpha){array[i]=(alpha<<24)|(blue<<16)|(green<<8)|red;return;}
pointToIndex=function(x,y){return(y*this.width)+x;}
getRandomColor=function(){var color=new Color(0,0,0,255);color.r=Math.floor(Math.random()*256);color.g=Math.floor(Math.random()*256);color.b=Math.floor(Math.random()*256);return color;}
insideFrustum=function(vertices){var v1FrusValue=0<<0;var v2FrusValue=0<<0;var v3FrusValue=0<<0;var w=0;var vertex1=vertices[0];var vertex2=vertices[1];var vertex3=vertices[2];var zCheck=true;if(vertex1[3]==1&&vertex1[3]==1&&vertex1[3]==1){zCheck=false;}
w=vertex1[3];if(vertex1[0]<-w){v1FrusValue+=1;}else if(vertex1[0]>w){v1FrusValue+=2;}
if(vertex1[1]>w){v1FrusValue+=4;}else if(vertex1[1]<-w){v1FrusValue+=8;}
if(zCheck){if(vertex1[2]>-1){v1FrusValue+=16;}else if(vertex1[2]<-w){v1FrusValue+=32;}}
w=vertex2[3];if(vertex2[0]<-w){v2FrusValue+=1;}else if(vertex2[0]>w){v2FrusValue+=2;}
if(vertex2[1]>w){v2FrusValue+=4;}else if(vertex2[1]<-w){v2FrusValue+=8;}
if(zCheck){if(vertex2[2]>-1){v2FrusValue+=16;}else if(vertex2[2]<-w){v2FrusValue+=32;}}
w=vertex3[3];if(vertex3[0]<-w){v3FrusValue+=1;}else if(vertex3[0]>w){v3FrusValue+=2;}
if(vertex3[1]>w){v3FrusValue+=4;}else if(vertex3[1]<-w){v3FrusValue+=8;}
if(zCheck){if(vertex3[2]>-1){v3FrusValue+=16;}else if(vertex3[2]<-w){v3FrusValue+=32;}}
var frustumCheck=(v1FrusValue&1)&(v2FrusValue&1)&(v3FrusValue&1)|(v1FrusValue&2)&(v2FrusValue&2)&(v3FrusValue&2)|(v1FrusValue&4)&(v2FrusValue&4)&(v3FrusValue&4)|(v1FrusValue&8)&(v2FrusValue&8)&(v3FrusValue&8)|(v1FrusValue&16)&(v2FrusValue&16)&(v3FrusValue&16)|(v1FrusValue&32)&(v2FrusValue&32)&(v3FrusValue&32);if(frustumCheck>0){return-1;}else{var nearPlaneValue=0;if((v1FrusValue&16)==16){nearPlaneValue+=1;}
if((v2FrusValue&16)==16){nearPlaneValue+=2;}
if((v3FrusValue&16)==16){nearPlaneValue+=4;}
return nearPlaneValue;}
return-1;}
UVMapAdjustment=function(vertices){var index=this.SHADER_shader0.pixelTexCoordOffset;var count=index+this.SHADER_shader0.pixelTexCoordCount;for(index;index<count;index++){var lowest;var v0=vertices[0][index];var v1=vertices[1][index]
var v2=vertices[2][index];if(v0<=v1&&v0<=v2){lowest=v0;}else if(v1<=v0&&v1<=v2){lowest=v1;}else if(v2<=v0&&v2<=v1){lowest=v2;}
while(lowest<0){lowest=lowest+1;v0=v0+1;v1=v1+1;v2=v2+1;}
while(lowest>=1){lowest=lowest-1;v0=v0-1;v1=v1-1;v2=v2-1;}
vertices[0][index]=v0;vertices[1][index]=v1;vertices[2][index]=v2;}
return;}
clipNearPlane=function(vertexVectors,clippingValue){if(clippingValue==1||clippingValue==2||clippingValue==4){var vertex1=null;var vertex2;var vertex3;var vertex1a=new Float32Array(this.VERTEX_LENGTH);var vertex1b=new Float32Array(this.VERTEX_LENGTH);if(clippingValue==1){vertex1=vertexVectors[0];vertex2=vertexVectors[1];vertex3=vertexVectors[2];}else if(clippingValue==2){vertex1=vertexVectors[1];vertex2=vertexVectors[2];vertex3=vertexVectors[0];}else if(clippingValue==4){vertex1=vertexVectors[2];vertex2=vertexVectors[0];vertex3=vertexVectors[1];}
var difference;var percentage1;var i;difference=vertex2[2]-vertex1[2];percentage1=(-1-vertex1[2])/difference;for(i=0;i<this.VERTEX_LENGTH;i++){vertex1a[i]=vertex1[i]+((vertex2[i]-vertex1[i])*percentage1);}
vertex1a[2]=-1;difference=vertex3[2]-vertex1[2];percentage1=(-1-vertex1[2])/difference;for(i=0;i<this.VERTEX_LENGTH;i++){vertex1b[i]=vertex1[i]+((vertex3[i]-vertex1[i])*percentage1);}
vertex1b[2]=-1;vertexVectors[0]=vertex3;vertexVectors[1]=vertex1b;vertexVectors[2]=vertex1a;vertexVectors.push(vertex2);}else{var vertex1=null;var vertex2;var vertex3;if(clippingValue==3){vertex1=vertexVectors[2];vertex2=vertexVectors[0];vertex3=vertexVectors[1];}else if(clippingValue==5){vertex1=vertexVectors[1];vertex2=vertexVectors[2];vertex3=vertexVectors[0];}else if(clippingValue==6){vertex1=vertexVectors[0];vertex2=vertexVectors[1];vertex3=vertexVectors[2];}
var difference;var percentage1;var percentage2;difference=vertex1[2]-vertex2[2];percentage1=(-1-vertex2[2])/difference;for(i=0;i<this.VERTEX_LENGTH;i++){vertex2[i]=vertex2[i]+((vertex1[i]-vertex2[i])*percentage1);}
vertex2[2]=-1;difference=vertex1[2]-vertex3[2];percentage1=(-1-vertex3[2])/difference;for(i=0;i<this.VERTEX_LENGTH;i++){vertex3[i]=vertex3[i]+((vertex1[i]-vertex3[i])*percentage1);}
vertex3[2]=-1;}
return;}
perspectiveDivision=function(vertices){var verticesLength=vertices.length;var vertexLength=this.VERTEX_LENGTH;for(var i=0;i<verticesLength;i++){var invertedW=1/vertices[i][3];var vertex=vertices[i];for(var j=0;j<vertexLength;j++){vertex[j]=vertex[j]*invertedW;}
vertices[i][3]=invertedW;}}
backfaceCull=function(vertex1,vertex2,vertex3){var z=(vertex2[0]-vertex1[0])*(vertex3[1]-vertex1[1])-(vertex2[1]-vertex1[1])*(vertex3[0]-vertex1[0]);if(z<0){return false}else{return true;}}
viewportTransform=function(vertices){for(var j=0;j<vertices.length;j++){var invertedW=vertices[j][3];vertices[j][3]=1;this.multiplyVectorWithMatrixViewportTransform(vertices[j],this.viewportMatrix);vertices[j][3]=invertedW;}}
roundScreenValues=function(vertices){if(this.PROP_ENABLE_OVERSCAN){var avgX=0;var avgY=0;for(var i=0;i<vertices.length;i++){avgX=avgX+vertices[i][0];avgY=avgY+vertices[i][1];}
avgX=avgX/vertices.length;avgY=avgY/vertices.length;for(var i=0;i<vertices.length;i++){var x=vertices[i][0];x=x<avgX?(x<<0):(x+1)<<0;vertices[i][0]=x;var y=vertices[i][1];y=y<avgY?(y<<0):(y+1)<<0;vertices[i][1]=y-this.startY;}}else{for(var i=0;i<vertices.length;i++){vertices[i][0]=(vertices[i][0]+0.5)<<0;vertices[i][1]=((vertices[i][1]+0.5)<<0)-this.startY;}}
return;}
createViewportMatrix=function(x,y,width,height){var result=new CPU3D_Matrix();result.set(0,0,width/2);result.set(1,1,-height/2);result.set(0,3,(x+width)/2);result.set(1,3,(y+height)/2);return result;}
getVBOId=function(){for(var i=0;i<this.vertexBank.length;i++){if(this.vertexBank[i]==null){this.vertexBank[i]==new Float32Array(0);return i;}}
var id=this.vertexBank.length;this.vertexBank.push(new Float32Array(0));return id;}
loadVBO=function(vboID,vertexData){this.vertexBank[vboID]=new Float32Array(vertexData.length);this.vertexBank[vboID].set(vertexData);return;}
clearVBO=function(vboID){this.vertexBank[vboID]=null;return;}
getTBOId=function(){for(var i=0;i<this.textureBank.length;i++){if(this.textureBank[i]==null){this.textureBank[i]==this.defaultTexture;return i;}}
var id=this.textureBank.length;this.textureBank.push(this.defaultTexture);return id;}
loadTBO=function(tboID,data,width,height){if(this.textureCheck(tboID,"loadTBO")){var length=data.length/4;var textureBuffer=new Uint32Array(length);for(var i=0;i<length;i++){var red=i*4+0;var green=i*4+1;var blue=i*4+2;var alpha=i*4+3;textureBuffer[i]=(data[alpha]<<24)|(data[blue]<<16)|(data[green]<<8)|(data[red]);}
this.textureBank[tboID]={data:textureBuffer,width:width,height:height};}
return;}
bindTBO=function(textureSlot,textureIndex){if(textureSlot==undefined||textureSlot<0||textureSlot>7){console.log("cpu3d Error: BindTexture(textureSlot, textureIndex), texture slot must be in range 0 - 7. It is "+textureSlot);}
if(textureIndex==undefined){console.log("cpu3d Error: BindTexture(textureSlot, tbo). TBO is "+textureIndex);}
if(textureIndex>-1){this["TEXTURE_"+textureSlot]=this.textureBank[textureIndex];}else{this["TEXTURE_"+textureSlot]=null;}
return;}
clearTBO=function(tboID){if(this.textureCheck(tboID,"clearTBO")){var texture=this.textureBank[tboID];for(var i=0;i<this.CONT_TEXTURE_COUNT;i++){if(this["TEXTURE_"+i]==texture){this["TEXTURE_"+i]=null;}}
this.textureBank[tboID]=null;}
return;}
textureCheck=function(id,functionName){if(id<0&&id>=this.textureBank.length){console.log("cpu3d Error: Texture with ID "+id+" does not exist. Used in "+functionName+"()");return false;}
var texture=this.textureBank[id];if(texture==null){console.log("cpu3d Error: Texture with ID "+id+" does not exist. Used in "+functionName+"()");return false;}
return true;}
getSBOId=function(){for(var i=0;i<this.shaderBank.length;i++){if(this.shaderBank[i]==null){this.shaderBank[i]==new this.CPU3D_Shader(this,i);return i;}}
var shaderID=this.shaderBank.length;this.shaderBank.push(new CPU3D_Shader(this,shaderID));return shaderID;}
loadSBO=function(shaderID){if(shaderID<1&&shaderID>=this.shaderBank.length){console.log("cpu3d Error: Shader with ID "+shaderID+" does not exist. Used in loadSBO()");return;}
var shader=this.shaderBank[shaderID];if(shader==null){console.log("cpu3d Error: Shader with ID "+shaderID+" does not exist. Used in loadSBO()");return;}
shader.createShader();return;}
bindSBO=function(shaderID){if(shaderID==0){this.SHADER_shader0=null;}
if(this.shaderCheck(shaderID,"bindSBO")){var shader=this.shaderBank[shaderID];if(shader.created==false){console.log("cpu3d Error: Shader "+shaderID+" has not been loaded. Used in "+functionName+"()");return false;}
this.SHADER_shader0=null;this.SHADER_shader0=shader;this.SHADER_shader0.useShader();}
return;}
clearSBO=function(shaderID){if(this.shaderCheck(shaderID,"clearSBO")){var shader=this.shaderBank[shaderID];if(this.SHADER_shader0==shader){this.SHADER_shader0=null;}
this.shaderBank[shaderID]=null;}
return;}
assignSBOVertexFunction=function(shaderID,vertexFunction){if(this.shaderCheck(shaderID,"assignSBOVertexFunction")){var shader=this.shaderBank[shaderID];shader.setVertexFunction(vertexFunction);}
return;}
assignSBOPixelFunction=function(shaderID,pixelFunction){if(this.shaderCheck(shaderID,"assignSBOPixelFunction")){var shader=this.shaderBank[shaderID];shader.setPixelFunction(pixelFunction);}
return;}
addSBOVertexAttribute=function(shaderID,shader,type,length){if(this.shaderCheck(shaderID,"addSBOVertexAttribute")){var shaderRef=this.shaderBank[shaderID];shaderRef.addSBOVertexAttribute(shader,type,length);}
return;}
shaderCheck=function(shaderID,functionName){if(shaderID<0&&shaderID>=this.shaderBank.length){console.log("cpu3d Error: Shader with ID "+shaderID+" does not exist. Used in "+functionName+"()");return false;}
var shader=this.shaderBank[shaderID];if(shader==null){console.log("cpu3d Error: Shader with ID "+shaderID+" does not exist. Used in "+functionName+"()");return false;}
return true;}
vecByMatrixCol=function(vector,matrix,offset){var xIndex=offset;var yIndex=offset+1;var zIndex=offset+2;var wIndex=offset+3;var x=(vector[xIndex]*matrix[0])+(vector[yIndex]*matrix[4])+(vector[zIndex]*matrix[8])+(vector[wIndex]*matrix[12]);var y=(vector[xIndex]*matrix[1])+(vector[yIndex]*matrix[5])+(vector[zIndex]*matrix[9])+(vector[wIndex]*matrix[13]);var z=(vector[xIndex]*matrix[2])+(vector[yIndex]*matrix[6])+(vector[zIndex]*matrix[10])+(vector[wIndex]*matrix[14]);var w=(vector[xIndex]*matrix[3])+(vector[yIndex]*matrix[7])+(vector[zIndex]*matrix[11])+(vector[wIndex]*matrix[15]);vector[xIndex]=x;vector[yIndex]=y;vector[zIndex]=z;vector[wIndex]=w;return;}
vecByMatrixRow=function(vector,matrix,offset){var xIndex=offset;var yIndex=offset+1;var zIndex=offset+2;var wIndex=offset+3;var x=(vector[xIndex]*matrix[0])+(vector[yIndex]*matrix[1])+(vector[zIndex]*matrix[2])+(vector[wIndex]*matrix[3]);var y=(vector[xIndex]*matrix[4])+(vector[yIndex]*matrix[5])+(vector[zIndex]*matrix[6])+(vector[wIndex]*matrix[7]);var z=(vector[xIndex]*matrix[8])+(vector[yIndex]*matrix[9])+(vector[zIndex]*matrix[10])+(vector[wIndex]*matrix[11]);var w=(vector[xIndex]*matrix[12])+(vector[yIndex]*matrix[13])+(vector[zIndex]*matrix[14])+(vector[wIndex]*matrix[15]);vector[xIndex]=x;vector[yIndex]=y;vector[zIndex]=z;vector[wIndex]=w;return;}
multiplyVectorWithMatrixViewportTransform=function(vector,m2){var x=(vector[0]*m2.data[0])+(vector[1]*m2.data[4])+(vector[2]*m2.data[8])+(vector[3]*m2.data[12]);var y=(vector[0]*m2.data[1])+(vector[1]*m2.data[5])+(vector[2]*m2.data[9])+(vector[3]*m2.data[13]);var z=(vector[0]*m2.data[2])+(vector[1]*m2.data[6])+(vector[2]*m2.data[10])+(vector[3]*m2.data[14]);var w=(vector[0]*m2.data[3])+(vector[1]*m2.data[7])+(vector[2]*m2.data[11])+(vector[3]*m2.data[15]);vector[0]=x;vector[1]=y;vector[2]=z;vector[3]=w;return;}
getDifference=function(n1,n2){if(n1>=0&&n2>=0){return(n2>n1)?(n2-n1):(n1-n2);}else if(n1<0&&n2>=0){return(-n1)+n2;}else if(n2<0&&n1>=0){return(-n2)+n1;}else if(n1<0&&n2<0){return(n2<n1)?(-(n2-n1)):(-(n1-n2));}}
getCardinalDifference=function(x1,y1,x2,y2){var s1=this.getDifference(x1,x2);var s2=this.getDifference(y1,y2);var distance=Math.sqrt(s1*s1+s2*s2);return distance;}
getCardinalDifference3D=function(x1,y1,z1,x2,y2,z2){var s1=this.getDifference(x1,x2);var s2=this.getDifference(y1,y2);var distance=Math.sqrt(s1*s1+s2*s2);return distance;}
drawLine=function(x1,x2,y1,y2){if(x1>x2){var temp=x1;x1=x2;x2=temp;temp=y1;y1=y2;y2=temp;}
var m=(y2-y1)/(x2-x1);var c=y1-(m*x1);for(var x=x1;x<=x2;x++){var y=m*x+c;var index=this.pointToIndex(x,y<<0);this.pixelBuffer_Uint32[index]=(255<<24)|(255<<16)|(255<<8)|255;}
return;}}
class CPU3D_Matrix{#data;#mulTemp;#matTemp;constructor(){this.data=new Array(16);this.makeIndentityMatrix();this.mulTemp=new Array(16);this.matTemp={data:new Array(16)};}
copyMatrix=function(){var newMatrix=new CPU3D_Matrix();this.data=new Array(16);this.data[0]=this.data[0];this.data[1]=this.data[1];this.data[2]=this.data[2];this.data[3]=this.data[3];this.data[4]=this.data[4];this.data[5]=this.data[5];this.data[6]=this.data[6];this.data[7]=this.data[7];this.data[8]=this.data[8];this.data[9]=this.data[9];this.data[10]=this.data[10];this.data[11]=this.data[11];this.data[12]=this.data[12];this.data[13]=this.data[13];this.data[14]=this.data[14];this.data[15]=this.data[15];return newMatrix;}
get=function(x,y){return this.data[x+y*4];}
set=function(x,y,value){this.data[x+y*4]=value;return;}
multiplyWithMatrix=function(m2){this.mulTemp[0]=m2.data[0]*this.data[0]+m2.data[1]*this.data[4]+m2.data[2]*this.data[8]+m2.data[3]*this.data[12];this.mulTemp[1]=m2.data[0]*this.data[1]+m2.data[1]*this.data[5]+m2.data[2]*this.data[9]+m2.data[3]*this.data[13];this.mulTemp[2]=m2.data[0]*this.data[2]+m2.data[1]*this.data[6]+m2.data[2]*this.data[10]+m2.data[3]*this.data[14];this.mulTemp[3]=m2.data[0]*this.data[3]+m2.data[1]*this.data[7]+m2.data[2]*this.data[11]+m2.data[3]*this.data[15];this.mulTemp[4]=m2.data[4]*this.data[0]+m2.data[5]*this.data[4]+m2.data[6]*this.data[8]+m2.data[7]*this.data[12];this.mulTemp[5]=m2.data[4]*this.data[1]+m2.data[5]*this.data[5]+m2.data[6]*this.data[9]+m2.data[7]*this.data[13];this.mulTemp[6]=m2.data[4]*this.data[2]+m2.data[5]*this.data[6]+m2.data[6]*this.data[10]+m2.data[7]*this.data[14];this.mulTemp[7]=m2.data[4]*this.data[3]+m2.data[5]*this.data[7]+m2.data[6]*this.data[11]+m2.data[7]*this.data[15];this.mulTemp[8]=m2.data[8]*this.data[0]+m2.data[9]*this.data[4]+m2.data[10]*this.data[8]+m2.data[11]*this.data[12];this.mulTemp[9]=m2.data[8]*this.data[1]+m2.data[9]*this.data[5]+m2.data[10]*this.data[9]+m2.data[11]*this.data[13];this.mulTemp[10]=m2.data[8]*this.data[2]+m2.data[9]*this.data[6]+m2.data[10]*this.data[10]+m2.data[11]*this.data[14];this.mulTemp[11]=m2.data[8]*this.data[3]+m2.data[9]*this.data[7]+m2.data[10]*this.data[11]+m2.data[11]*this.data[15];this.mulTemp[12]=m2.data[12]*this.data[0]+m2.data[13]*this.data[4]+m2.data[14]*this.data[8]+m2.data[15]*this.data[12];this.mulTemp[13]=m2.data[12]*this.data[1]+m2.data[13]*this.data[5]+m2.data[14]*this.data[9]+m2.data[15]*this.data[13];this.mulTemp[14]=m2.data[12]*this.data[2]+m2.data[13]*this.data[6]+m2.data[14]*this.data[10]+m2.data[15]*this.data[14];this.mulTemp[15]=m2.data[12]*this.data[3]+m2.data[13]*this.data[7]+m2.data[14]*this.data[11]+m2.data[15]*this.data[15];this.data[0]=this.mulTemp[0];this.data[1]=this.mulTemp[1];this.data[2]=this.mulTemp[2];this.data[3]=this.mulTemp[3];this.data[4]=this.mulTemp[4];this.data[5]=this.mulTemp[5];this.data[6]=this.mulTemp[6];this.data[7]=this.mulTemp[7];this.data[8]=this.mulTemp[8];this.data[9]=this.mulTemp[9];this.data[10]=this.mulTemp[10];this.data[11]=this.mulTemp[11];this.data[12]=this.mulTemp[12];this.data[13]=this.mulTemp[13];this.data[14]=this.mulTemp[14];this.data[15]=this.mulTemp[15];return;}
debugPrint=function(){console.log("|"+this.get(0,0)+"|"+this.get(0,1)+"|"+this.get(0,2)+"|"+this.get(0,3)+"|");console.log("|"+this.get(1,0)+"|"+this.get(1,1)+"|"+this.get(1,2)+"|"+this.get(1,3)+"|");console.log("|"+this.get(2,0)+"|"+this.get(2,1)+"|"+this.get(2,2)+"|"+this.get(2,3)+"|");console.log("|"+this.get(3,0)+"|"+this.get(3,1)+"|"+this.get(3,2)+"|"+this.get(3,3)+"|");return;}
matTempIndentity=function(){this.matTemp.data[0]=1;this.matTemp.data[1]=0;this.matTemp.data[2]=0;this.matTemp.data[3]=0;this.matTemp.data[4]=0;this.matTemp.data[5]=1;this.matTemp.data[6]=0;this.matTemp.data[7]=0;this.matTemp.data[8]=0;this.matTemp.data[9]=0;this.matTemp.data[10]=1;this.matTemp.data[11]=0;this.matTemp.data[12]=0;this.matTemp.data[13]=0;this.matTemp.data[14]=0;this.matTemp.data[15]=1;}
makeIndentityMatrix=function(){this.data[0]=1;this.data[1]=0;this.data[2]=0;this.data[3]=0;this.data[4]=0;this.data[5]=1;this.data[6]=0;this.data[7]=0;this.data[8]=0;this.data[9]=0;this.data[10]=1;this.data[11]=0;this.data[12]=0;this.data[13]=0;this.data[14]=0;this.data[15]=1;}
makeTranslationMatrix=function(x,y,z){this.matTempIndentity();this.matTemp.data[12]=x;this.matTemp.data[13]=y;this.matTemp.data[14]=z;this.multiplyWithMatrix(this.matTemp);return;}
makeXRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[5]=Math.cos(angle);this.matTemp.data[9]=-Math.sin(angle);this.matTemp.data[6]=Math.sin(angle);this.matTemp.data[10]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeYRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[10]=Math.cos(angle);this.matTemp.data[2]=-Math.sin(angle);this.matTemp.data[8]=Math.sin(angle);this.matTemp.data[0]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeZRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[0]=Math.cos(angle);this.matTemp.data[4]=-Math.sin(angle);this.matTemp.data[1]=Math.sin(angle);this.matTemp.data[5]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeScaleMatrix=function(x,y,z){this.matTempIndentity();this.matTemp.data[0]=x;this.matTemp.data[5]=y;this.matTemp.data[10]=z;this.multiplyWithMatrix(this.matTemp);return;}
makeInverseTranslationMatrix=function(x,y,z){this.matTempIndentity();this.matTemp.data[12]=-x;this.matTemp.data[13]=-y;this.matTemp.data[14]=-z;this.multiplyWithMatrix(this.matTemp);return;}
makeInverseXRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[5]=Math.cos(angle);this.matTemp.data[9]=Math.sin(angle);this.matTemp.data[6]=-Math.sin(angle);this.matTemp.data[10]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeInverseYRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[10]=Math.cos(angle);this.matTemp.data[2]=Math.sin(angle);this.matTemp.data[8]=-Math.sin(angle);this.matTemp.data[0]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeInverseZRotationMatrix=function(angle){this.matTempIndentity();this.matTemp.data[0]=Math.cos(angle);this.matTemp.data[4]=Math.sin(angle);this.matTemp.data[1]=-Math.sin(angle);this.matTemp.data[5]=Math.cos(angle);this.multiplyWithMatrix(this.matTemp);return;}
makeInverseScaleMatrix=function(x,y,z){this.matTempIndentity();this.matTemp.data[0]=1/x;this.matTemp.data[5]=1/y;this.matTemp.data[10]=1/z;this.multiplyWithMatrix(this.matTemp);return;}
makeRotation=function(angle,v){var result=new CPU3D_Matrix();var angle1;var angle2;if(v.z!=0){angle1=Math.atan(v.y/v.z);result.makeXRotationMatrix(angle1);angle2=Math.atan(v.x/v.z);result.makeYRotationMatrix(angle2);result.makeZRotationMatrix(angle);result.makeInverseYRotationMatrix(angle2);result.makeInverseXRotationMatrix(angle1);}else if(v.x!=0){angle2=Math.atan(v.y/v.x);result.makeZRotationMatrix(angle2);result.makeXRotationMatrix(angle);result.makeInverseZRotationMatrix(angle2);}else{result.makeYRotationMatrix(angle);}
this.multiplyWithMatrix(result);return;}
makePrespectiveMatrix(fieldOfView,aspectRatio,near,far){var top=near*Math.tan(fieldOfView*3.14159265/360);var bottom=-top;var right=top*aspectRatio;var left=-right;var result=new CPU3D_Matrix();result.set(0,0,(2*near)/(right-left));result.set(1,1,(2*near)/(top-bottom));result.set(2,2,(near+far)/(far-near));result.set(3,2,-1);result.set(2,3,(2*near*far)/(far-near));result.set(3,3,0);this.matTempIndentity();this.multiplyWithMatrix(result);return;}}
class CPU3D_Polygon{#vertices;#vertexLength;#verticesLength;#currentPosition;polygon=function(){this.vertices=null;this.verticesLength=0;this.currentPosition=0;}
createPoylgon=function(vertices,width,height){var withinFrame=this.withinFrame(vertices,width,height);var outOfFrame=this.outOfFrame(vertices,width,height);this.vertexLength=vertices[0].length;if(!withinFrame&&!outOfFrame){this.vertices=vertices;this.clipPolygon(this.vertices,width,height);}else if(withinFrame){var verticesLength=vertices.length;var newVertices=new Array();for(var i=0;i<verticesLength;i++){newVertices.push(vertices[i]);}
this.vertices=newVertices;}else{this.vertices=new Array();}
return this.vertices;}
withinFrame=function(vertices,width,height){for(var i=0;i<vertices.length;i++){var vertex=vertices[i];if(vertex[0]<0){return false;}else if(vertex[0]>=width){return false;}else if(vertex[1]<0){return false;}else if(vertex[1]>=height){return false;}}
return true;}
outOfFrame=function(vertices,width,height){var left=0;var right=0;var top=0;var bottom=0;var length=vertices.length;for(var i=0;i<length;i++){var vertex=vertices[i];if(vertex[0]<0){left++;}
if(vertex[0]>=width){right++;}
if(vertex[1]<0){top++;}
if(vertex[1]>=height){bottom++;}}
if(left==length||right==length||top==length||bottom==length){return true;}else{return false;}}
clipPolygon=function(vertices,width,height){var verticesOutput;var v0;var v1;var v2;var clip;var j;verticesOutput=new Array();for(var j=0;j<this.vertices.length;j++){v0=j==0?this.vertices[this.vertices.length-1]:this.vertices[j-1];v1=this.vertices[j];v2=this.vertices[(j+1)%this.vertices.length];clip=this.clippingCheck(v1[0],v2[0],0,false);this.verticesModify(v1,v2,0,0,0,height,clip,verticesOutput);}
this.vertices=verticesOutput;verticesOutput=new Array();for(var j=0;j<this.vertices.length;j++){v0=j==0?this.vertices[this.vertices.length-1]:this.vertices[j-1];v1=this.vertices[j];v2=this.vertices[(j+1)%this.vertices.length];clip=this.clippingCheck(v1[0],v2[0],width-1,true);this.verticesModify(v1,v2,width-1,0,width-1,height,clip,verticesOutput);}
this.vertices=verticesOutput;verticesOutput=new Array();for(var j=0;j<this.vertices.length;j++){v0=j==0?this.vertices[this.vertices.length-1]:this.vertices[j-1];v1=this.vertices[j];v2=this.vertices[(j+1)%this.vertices.length];clip=this.clippingCheck(v1[1],v2[1],0,false);this.verticesModify(v1,v2,0,0,width-1,0,clip,verticesOutput);}
this.vertices=verticesOutput;verticesOutput=new Array();for(var j=0;j<this.vertices.length;j++){v0=j==0?this.vertices[this.vertices.length-1]:this.vertices[j-1];v1=this.vertices[j];v2=this.vertices[(j+1)%this.vertices.length];clip=this.clippingCheck(v1[1],v2[1],height,true);this.verticesModify(v1,v2,0,height,width-1,height,clip,verticesOutput);}
this.vertices=verticesOutput;return;}
clippingCheck=function(v1,v2,value,side){var v1In=true;var v2In=true;if(side){if(v1>value){v1In=false;}
if(v2>value){v2In=false;}}else{if(v1<value){v1In=false;}
if(v2<value){v2In=false;}}
if(!v1In&&v2In){return 0;}else if(v1In&&v2In){return 1;}else if(v1In&&!v2In){return 2;}else if(!v1In&&!v2In){return 3;}}
verticesModify=function(v1,v2,b1x,b1y,b2x,b2y,clip,output){if(clip==0){output.push(this.getIntersection(v1,v2,b1x,b1y,b2x,b2y));output.push(v2);}else if(clip==1){output.push(v2);}else if(clip==2){output.push(this.getIntersection(v1,v2,b1x,b1y,b2x,b2y));}else if(clip==3){}}
getIntersection=function(v1,v2,b1x,b1y,b2x,b2y){var x;var y;var eqM;var eqC;if(v2[0]!=v1[0]){eqM=(v2[1]-v1[1])/(v2[0]-v1[0]);eqC=v1[1]-eqM*v1[0];if(b1x==b2x){x=b1x;y=eqM*b1x+eqC;}else if(b1y==b2y){x=(b1y-eqC)/eqM;y=b1y;}}else{x=v1[0];y=b1y;}
var xDifference=this.getDifference(v1[0],v2[0]);var yDifference=this.getDifference(v1[1],v2[1]);var percentage=0;if(yDifference>0.1){percentage=y>v1[1]?(y-v1[1])/yDifference:(v1[1]-y)/yDifference;}else{percentage=x>v1[0]?(x-v1[0])/xDifference:(v1[0]-x)/xDifference;}
var newVertex=new Float32Array(this.vertexLength);newVertex[0]=(x+0.5)>>0;newVertex[1]=(y+0.5)>>0;for(var i=2;i<this.vertexLength;i++){var difference=this.getDifference(v1[i],v2[i])
newVertex[i]=v1[i]<v2[i]?v1[i]+(difference*percentage):v1[i]-(difference*percentage);}
return newVertex;}
getDifference=function(n1,n2){if(n1>=0&&n2>=0){return(n2>n1)?(n2-n1):(n1-n2);}else if(n1<0&&n2>=0){return(-n1)+n2;}else if(n2<0&&n1>=0){return(-n2)+n1;}else if(n1<0&&n2<0){return(n2<n1)?(-(n2-n1)):(-(n1-n2));}}}
class CPU3D_Shader{#render;#properties;#vertexLoop;#createEdge;#scanline;#vertexFunction;#pixelFunction;#id;#created;#inputCount;#outputCount;#pixelVertexCount;#pixelVertexOffset;#pixelTexCoordCount;#pixelTexCoordOffset;#pixelOtherCount;#pixelOtherOffset;constructor(render,id){this.render=render;this.properties=new Array();this.created=false;this.id=id;eval("CPU3D_Core.prototype.vertexLoop_"+this.id+";");eval("CPU3D_Core.prototype.createEdge_"+this.id+";");eval("CPU3D_Core.prototype.scanline_"+this.id+";");eval("CPU3D_Core.prototype.vertexFunction_"+this.id+";");eval("CPU3D_Core.prototype.pixelFunction_"+this.id+";");return;}
loadProperties=function(properties){this.inputCount=0;this.outputCount=0;this.pixelVertexCount=0;this.pixelVertexOffset=0;this.pixelTexCoordCount=0;this.pixelTexCoordOffset=0;this.pixelOtherCount=0;this.pixelOtherOffset=0;var shader;var type;var length;var pixelOffset=0;var hasPosition=false;for(var i=0;i<properties.length;i++){shader=properties[i].shader;type=properties[i].type;length=properties[i].length;if(shader=="vertex"||shader=="VERTEX"){this.inputCount+=length;}else if(shader=="pixel"||shader=="PIXEL"||shader=="FRAGMENT"){if(type=="position"||type=="POSITION"){hasPosition=true;if(length!=4){console.log("cpu3d Error: 'POSITION' property in addSBOVertexAttribute() must have a length of 4. {X, Y, Z, W}");}
this.pixelVertexCount=4;this.pixelVertexOffset=pixelOffset;}else if(type=="texcoord"||type=="TEXCOORD"){this.pixelTexCoordCount=length;this.pixelTexCoordOffset=pixelOffset;}else{this.pixelOtherCount+=length;}
pixelOffset+=length;this.outputCount+=length;}else{console.log("cpu3d Error: "+shader+" is an invalid shader for addSBOVertexAttribute().");}}
if(this.pixelTexCoordOffset<this.pixelVertexOffset){this.pixelTexCoordOffset+=4;}
if(!hasPosition){console.log("cpu3d Error: A 'position' property must be included for the pixel shader");console.log('cpu3d Error: EG: {shader: "pixel", type: "position", length: 4}');}}
setVertexFunction=function(vertexFunction){this.vertexFunction=vertexFunction;if(this.vertexFunction==undefined){console.log("cpu3d Error: "+vertexFunction+" vertex shader function is undefined");return;}
this.render["vertexFunction_"+this.id]=this.vertexFunction;}
setPixelFunction=function(pixelFunction){this.pixelFunction=pixelFunction;if(this.pixelFunction==undefined){console.log("cpu3d Error: "+pixelFunction+" fragment shader function is undefined");return;}
this.render["pixelFunction_"+this.id]=this.pixelFunction;}
addSBOVertexAttribute=function(shader,type,length){this.properties.push({shader:shader,type:type,length:length});}
createShader=function(){this.created=true;this.loadProperties(this.properties);this.vertexLoopCreation(this.id);this.createEdgeCreation(this.properties,this.id);this.scanlineCreation(this.properties,this.id);this.vertexLoop=this.render["vertexLoop_"+this.id];this.createEdge=this.render["createEdge_"+this.id];this.scanline=this.render["scanline_"+this.id];}
useShader=function(){this.render.vertexLoop=this.vertexLoop;this.render.createEdge=this.createEdge;}
vertexLoopCreation=function(shaderID){var numVariables=this.inputCount;var functionString=""
+"CPU3D_Core.prototype.vertexLoop_"+shaderID+" = function(vertexBuffer, startIndex, endIndex, faceVertices, intputVertex, inputLength) {"
+"	var outputVertex;"
+"	var i = startIndex;"
+"	var v;"
+"	while (i < endIndex) {"
+"		for (v = 0; (v < 3) && (i < endIndex); v++) {";for(var i=0;i<numVariables;i++){functionString+="			intputVertex["+i+"] = vertexBuffer[i+"+i+"];";}
functionString+=""
+"			outputVertex = faceVertices[v];"
+"			this.vertexFunction_"+shaderID+"(this, intputVertex, outputVertex);"
+"			i += inputLength;"
+"		}"
+"		this.pipeline(faceVertices);"
+"	}"
+"}";eval(functionString);}
createEdgeCreation=function(propertiesList,shaderID){var xIndex=0;var yIndex=1;var numVariables=this.outputCount;var functionString=""
+"CPU3D_Core.prototype.createEdge_"+shaderID+" = function(vertices, indexTopL, indexTopR, yEnd, direction) {"
+"	var vL = vertices[indexTopL];"
+"	var vR = vertices[indexTopR];"
+"	var steps = 0.0;"
+"	var indexL = indexTopL;"
+"	var countL = 0;"
+"	var v1L = vL;"
+"	var v2L = vL;"
+"	var indexR = indexTopR;"
+"	var countR = 0;"
+"	var v1R;"
+"	var v2R = vR;"
+"		var _xL = v2L["+xIndex+"];"
+"		var _xLChange = 0.0;"
+"		var _xR = v2R["+xIndex+"];"
+"		var _xRChange = 0.0;"
+"		var y = vL["+yIndex+"];";for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex){functionString+="			var _p"+i+"L = v2L["+i+"];";functionString+="			var _p"+i+"LChange = 0.0;";functionString+="			var _p"+i+"R = v2R["+i+"];";functionString+="			var _p"+i+"RChange = 0.0;";}}
functionString+=""
+"	var verticesLength = vertices.length;"
+"	for (y; y < yEnd; y) {"
+"		while (countL == 0) {"
+"			indexL = (indexL + direction) % verticesLength;"
+"			indexL = indexL < 0 ? indexL = verticesLength - 1 : indexL;"
+"			v1L = v2L;"
+"			v2L = vertices[indexL];"
+"			countL = v2L["+yIndex+"] - v1L["+yIndex+"];"
+"			if (countL > 0) {"
+"				steps = 1 / countL;"
+"				_xLChange = (v2L[0] - _xL) * steps;";for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex){functionString+="			_p"+i+"LChange = (v2L["+i+"] - _p"+i+"L) * steps;";}}
functionString+=""
+"			}"
+"		}"
+"		while (countR == 0) {"
+"			indexR = (indexR - direction) % verticesLength;"
+"			indexR = indexR < 0 ? indexR = verticesLength - 1 : indexR;"
+"			v1R = v2R;"
+"			v2R = vertices[indexR];"
+"			countR = v2R["+yIndex+"] - v1R["+yIndex+"];"
+"			if (countR > 0) {"
+"				steps = 1 / countR;"
+"				_xRChange = (v2R[0] - _xR) * steps;"
for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex){functionString+="			_p"+i+"RChange = (v2R["+i+"] - _p"+i+"R) * steps;";}}
functionString+=""
+"			}"
+"		}"
+"		for (y; countL > 0 && countR > 0; y++) {"
+"			this.scanline_"+shaderID+"("
for(var i=0;i<numVariables;i++){if(i==xIndex){functionString+="_xL<<0, _xR<<0";}else if(i==yIndex){functionString+="y, y";}else{functionString+="_p"+i+"L, _p"+i+"R";}
if(i+1!=numVariables){functionString+=", ";}}
functionString+=");"
+"			countL--;"
+"			countR--;"
+"			_xL += _xLChange;"
+"			_xR += _xRChange;";for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex){functionString+="			_p"+i+"L += _p"+i+"LChange;";functionString+="			_p"+i+"R += _p"+i+"RChange;";}}
functionString+=""
+"		}"
+"	}"
+"}";eval(functionString);}
scanlineCreation=function(propertiesList,shaderID){var numVariables=this.outputCount;var xIndex=0;var yIndex=1;var zIndex=2;var wIndex=3;var functionString=""
+"CPU3D_Core.prototype.scanline_"+shaderID+" = function(";for(var i=0;i<numVariables;i++){functionString+="_p"+i+"L, ";functionString+="_p"+i+"R";if(i<numVariables-1){functionString+=", ";}}
functionString+=""
+") {"
+"	var x = _p"+xIndex+"L;"
+"	var y = _p"+yIndex+"L;"
+"	var indexStart = (y * this.width) + _p"+xIndex+"L;"
+"	var indexEnd = ((y * this.width) + _p"+xIndex+"R) + 1;"
+"	var invertedXChange = 1/((_p"+xIndex+"R - _p"+xIndex+"L) + 1);"
+"	var z = _p"+zIndex+"L;"
+"	var zChange = ((_p"+zIndex+"R - _p"+zIndex+"L) * invertedXChange);"
+"	var w = _p"+wIndex+"L;"
+"	var wChange = (_p"+wIndex+"R - _p"+wIndex+"L) * invertedXChange;";for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex&&i!=zIndex&&i!=wIndex){functionString+="	var _p"+i+" = _p"+i+"L;";functionString+="	var _p"+i+"Change = (_p"+i+"R - _p"+i+"L) * invertedXChange;";}}
functionString+=""
+"	var pixelBuffer = this.pixelBuffer_Uint32;"
+"	var depthBuffer = this.depthBuffer_Float32;"
+"	var i = indexStart;"
+"	var useDepthBuffer = this.PROP_ENABLE_Z_BUFFER;"
+"	while (i < indexEnd) {		"
+"		if (!useDepthBuffer || z > this.depthBuffer_Float32[i]) {"
+"			var wInvert = 1/w;";functionString+="			var colour = this.pixelFunction_"+shaderID+"(this, "
for(var i=0;i<numVariables;i++){if(i==xIndex){functionString+="x";}else if(i==yIndex){functionString+="y";}else if(i==zIndex){functionString+="z";}else if(i==wIndex){functionString+="w";}else{functionString+="_p"+i+"*wInvert";}
if(i<numVariables-1){functionString+=", ";}}
functionString+=") >>> 0;";functionString+=""
+"			if (colour > 0) {"
+"				depthBuffer[i] = z;"
+"				pixelBuffer[i] = colour;"
+"			}"
+"		}"
+"		i++;"
+"		x++;"
+"		z += zChange;"
+"		w += wChange;"
for(var i=0;i<numVariables;i++){if(i!=xIndex&&i!=yIndex&&i!=zIndex&&i!=wIndex){functionString+="_p"+i+" += _p"+i+"Change;";}}
functionString+=""
+"	}"
+"	return;"
+"}";eval(functionString);}}